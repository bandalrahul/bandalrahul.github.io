{"config":{"targetPath":"feed.rss","ttlInterval":250,"maximumItemCount":100},"feed":"<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\" xmlns:atom=\"http:\/\/www.w3.org\/2005\/Atom\" xmlns:content=\"http:\/\/purl.org\/rss\/1.0\/modules\/content\/\"><channel><title>Swift By Rahul<\/title><description><\/description><link>bandalrahul.github.io<\/link><language>en<\/language><lastBuildDate>Mon, 14 Apr 2025 08:25:30 +0530<\/lastBuildDate><pubDate>Mon, 14 Apr 2025 08:25:30 +0530<\/pubDate><ttl>250<\/ttl><atom:link href=\"bandalrahul.github.io\/feed.rss\" rel=\"self\" type=\"application\/rss+xml\"\/><item><guid isPermaLink=\"true\">bandalrahul.github.io\/posts\/ApplePay<\/guid><title>Apple Pay Integration Guide<\/title><description>Apple Pay is a mobile payment and digital wallet service developed by Apple Inc. It allows users to make payments in person, in iOS apps, and on the web using Safari. Users can add their credit, debit, or prepaid cards to their Apple devices, enabling them to make payments using these devices instead of physical cards.<\/description><link>bandalrahul.github.io\/posts\/ApplePay<\/link><pubDate>Sun, 22 Dec 2024 17:08:00 +0530<\/pubDate><content:encoded><![CDATA[<h1>Apple Pay Integration Guide<\/h1><p>Apple Pay is a mobile payment and digital wallet service developed by Apple Inc. It allows users to make payments in person, in iOS apps, and on the web using Safari. Users can add their credit, debit, or prepaid cards to their Apple devices, enabling them to make payments using these devices instead of physical cards.<\/p><p><strong>Note:<\/strong> Apple Pay only works with the Safari browser. It is not compatible with Google Chrome and has never been.<\/p><hr><h2>Key Features of Apple Pay<\/h2><ul><li><strong>Contactless Payments<\/strong> Users can make secure, contactless payments at retail locations equipped with near-field communication (NFC) by holding their Apple device near the terminal.<\/li><\/ul><ul><li><strong>In-App Purchases<\/strong> Apple Pay can be used within supported apps on iOS devices for fast, secure checkouts.<\/li><\/ul><ul><li><strong>Web Payments<\/strong> On Safari, Apple Pay allows users to pay on websites without needing to re-enter card details.<\/li><\/ul><ul><li><strong>Security<\/strong> Apple Pay uses a feature called <em>tokenization<\/em> where the actual card number is not stored on the device or Apple servers. Instead, a unique Device Account Number is encrypted and securely stored.<\/li><\/ul><ul><li><strong>Privacy<\/strong> Apple does not track users’ transactions, offering greater privacy.<\/li><\/ul><h2>Apple Developer Setup for Apple Pay<\/h2><p>To implement Apple Pay in your apps, follow these steps:<\/p><h3>1. Create a Merchant Identifier<\/h3><p>Register a merchant ID with Apple to uniquely identify your business for accepting Apple Pay. This ID does not expire and can be reused across websites and apps.<\/p><h3>2. Create a Payment Processing Certificate<\/h3><p>Using your merchant identifier, generate a certificate to secure transaction data. Apple Pay servers use the public key to encrypt the data. You or your payment provider use the private key to decrypt and process the payment.<\/p><p>Check which payment merchants are available for Apple Pay.<\/p><h3>3. Enable Apple Pay in Xcode<\/h3><ol><li>Open your project in Xcode.<\/li><li>Select your project from the Project navigator.<\/li><li>Choose your app target.<\/li><li>Click the <strong>Signing &amp; Capabilities<\/strong> tab.<\/li><li>Click the <strong>+<\/strong> button and select <strong>Apple Pay<\/strong> from the Capabilities library.<\/li><li>Click the refresh icon to sync your merchant identifiers.<\/li><li>Select your desired merchant ID.<\/li><\/ol><h2>Create a Sandbox Apple ID<\/h2><h3>1. Create a New Apple ID<\/h3><p>Go to <a href=\"https:\/\/appleid.apple.com\/\">Apple ID<\/a> and register a new account. Use an unused email address. Verify your email by following the instructions sent to your inbox.<\/p><h3>2. Sign In to App Store Connect<\/h3><p>Visit <a href=\"https:\/\/appstoreconnect.apple.com\/\">App Store Connect<\/a>. Sign in using your main Apple Developer account.<\/p><h3>3. Add Sandbox Testers<\/h3><p>Navigate to <strong>Users and Access<\/strong> in App Store Connect. Click the <strong>+<\/strong> button. Add the sandbox Apple ID. Choose any role (role does not impact testing). Click <strong>Invite<\/strong>.<\/p><h3>4. Sign In on Your iOS Device<\/h3><p>On your device, sign out of your current Apple ID. Sign in using the sandbox account. Go to <strong>Settings &gt; iTunes &amp; App Store<\/strong> and sign in again with the sandbox ID.<\/p><p>Add sandbox cards to Apple Wallet: <a href=\"https:\/\/developer.apple.com\/apple-pay\/sandbox-testing\/\">Apple Pay Sandbox Testing<\/a><\/p><h2>Apple Pay Payment Workflow<\/h2><div style=\"text-align: center;\">\n    <img src=\"bandalrahul.github.io\/Images\/ApplepayFlow.png\" alt=\"Swift Logo\" class=\"responsive-image\">\n<\/div><h3>Prerequisites<\/h3><ul><li>Apple Pay should be available in the country: <a href=\"https:\/\/support.apple.com\/en-in\/102775\">Supported Countries<\/a><\/li><li>Supported networks (from API): <code>.quicPay<\/code>, <code>.masterCard<\/code>, <code>.visa<\/code>, <code>.discover<\/code>, <code>.amex<\/code><\/li><li>Country code (e.g., <code>US<\/code>) and currency code (e.g., <code>USD<\/code>)<\/li><li>Summary of items for purchase (e.g., product and price)<\/li><\/ul><h3>Payment Process<\/h3><p>Once a user authorizes Apple Pay, the app receives a payment token, which is sent to your backend API. The server validates and authorizes the token via the merchant gateway and sends the result back to the app.<\/p><p><strong>Example Token Data:<\/strong><\/p><pre><code class=\"language-json\">{\n  \"data\": \"...\",\n  \"signature\": \"...\",\n  \"header\": {\n    \"publicKeyHash\": \"...\",\n    \"ephemeralPublicKey\": \"...\",\n    \"transactionId\": \"...\"\n  },\n  \"version\": \"EC_v1\"\n}\n<\/code><\/pre><p>Note FYI: We won’t get selected card data until the user is not authorizing Apple pay payment.<\/p><div style=\"text-align:center;\">\n  <script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\n  <ins class=\"adsbygoogle\"\n       style=\"display:block\"\n       data-ad-client=\"ca-pub-9268892677399703\"\n       data-ad-slot=\"1234567890\"\n       data-ad-format=\"auto\"\n       data-full-width-responsive=\"true\"><\/ins>\n  <script>\n       (adsbygoogle = window.adsbygoogle || []).push({});\n  <\/script>\n<\/div>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">bandalrahul.github.io\/posts\/PushNotificationSimulator<\/guid><title>How to send push notifications on the iOS simulator?<\/title><description>Push notifications are the best way to fascinate the audience towards your iOS app. It’s like an alarm to convey your message to your user. Push notifications in ios are handled and authorized by APNs( Apple Push notification services).<\/description><link>bandalrahul.github.io\/posts\/PushNotificationSimulator<\/link><pubDate>Sun, 22 Dec 2024 17:08:00 +0530<\/pubDate><content:encoded><![CDATA[<h1>How to send push notifications on the iOS simulator?<\/h1><p>Push notifications are the best way to fascinate the audience towards your iOS app. It’s like an alarm to convey your message to your user. Push notifications in ios are handled and authorized by APNs( Apple Push notification services).<\/p><div style=\"text-align: center;\">\n    <img src=\"bandalrahul.github.io\/Images\/demo.png\" alt=\"Swift Logo\">\n<\/div><p>In any organization, there may be hundreds or thousands of developers and testers, sometimes organizations could not afford to give iOS devices for each and every developer or tester. But iOS push notifications can only be sent on devices. Don’t worry bro, In iOS 13 \/ Xcode 11.4 Apple introduced some new features which are very beneficial for the user’s and developer’s perspective and sending push notifications on simulators is one of them.<\/p><p>We will go through each and every step one by one, we need a few primary kinds of stuff like Xcode 11.4 and Catalina OS or more than that version.<\/p><p>How to do Project setup and take permission from the user to receive the push notifications :<\/p><ol><li>Create a new project.<\/li><li>Submit the required data such as project names like ‘PushNotifications‘.<\/li><li>Import UserNotification framework in Appdelegate class.<\/li><\/ol><pre><code class=\"language-swift\">‘import UserNotifications’\n\n4. Copy below code in Appdelegate to take authorization from the user to receive the push notification. \nfunc registerForSendPushNotifications() {\n            UNUserNotificationCenter.current()\n                .requestAuthorization(options: [.alert, .sound, .badge]) {(granted, error) in\n                    print(\"Push Notification Permission granted: \\(granted)\")\n            }\n    }\n<\/code><\/pre><ol start=\"5\"><li>Call the same function from didFinishLaunchingWithOptions, which is the first function in Appdelegate.<\/li><\/ol><pre><code class=\"language-swift\">func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n        \/\/ Override point for customization after application launch.\n        registerForSendPushNotifications()\n        return true\n    }\n<\/code><\/pre><ol start=\"6\"><li>Run the project on the simulator and just pause your running project. Now take a sip of water, your half of the work is done. Now we just have to collect some data which requires sending push notification on the simulator.<\/li><\/ol><p>Let’s collect for more information to get notifications over simulator:<\/p><h4>Simulators Device Identifier <\/h4><p>Select Window from the menu -&gt; Devices and simulators -&gt; Here you can see the whole list of physical devices and simulators -&gt; Select Device and copy it. And save somewhere in the Notes\/ TextEdit.<\/p><div style=\"text-align: center;\">\n    <img src=\"bandalrahul.github.io\/Images\/PushNotificationSimulator\/configure.gif\" alt=\"Swift Logo\" class=\"responsive-image\">\n<\/div><h4>Get Simulator Identifier: <\/h4><p>Example : 8E1C327E-4B05-4190-AEA1-0646E73A3A49<\/p><h4>Bundle Identifier : <\/h4><p>Select Project -&gt; Tap General Tab -&gt; Copy Bundle Identifier -&gt; Paste somewhere in the Notes\/TextEdit<\/p><div style=\"text-align: center;\">\n    <img src=\"bandalrahul.github.io\/Images\/PushNotificationSimulator\/appdelegate.gif\" alt=\"Swift Logo\" class=\"responsive-image\">\n<\/div><p>Get Bundle Identifier Example: ‘com.PushNotifications’<\/p><h4>.APNs File :  <\/h4><p>We need a JSON payload. The payload contains custom data which include a basic alert, badge count or sound, you can also add your own key-values. I will give you the demo content of the payload file.<\/p><p>Note: Payload contents should not more than 4 kb (4096 bytes).<\/p><pre><code class=\"language-swift\">{\n    \"aps\":{\n        \"alert\":\"Test drop\",\n        \"sound\":\"default\",\n        \"badge\":3\n    }\n}\n<\/code><\/pre><p>Copy this JSON new file change extension of this file ‘.apns’ and save it.<\/p><p>Now, here we have everything that needs to send push notification on the simulator. Follow the given steps to send notifications.<\/p><p>Open terminal.<\/p><p>Enter into the folder where you saved ‘.apns’ file. Like ‘cd Document’.<\/p><p>Enter this command.<\/p><p>xcrun simctl push <Device Identifier> <Bundle Identifier> <.apns file name> \n\n<h4>Example: <\/h4>\n<b>xcrun simctl push 8E1C327E-4B05-4190-AEA1-0646E73A3A49 com.Pushnotification test.apns.<\/b>\n\n<p> <i>Result : Notification sent to ‘com.Pushnotification’ <\/i><\/p>\n\n<div style=\"text-align: center;\">\n    <img src=\"bandalrahul.github.io\/Images\/PushNotificationSimulator\/terminal.png\" alt=\"Swift Logo\" class=\"responsive-image\">\n<\/div>\n\nIf you receive this message in the console: “Notification sent to com.PushNotification” Congratulations, You got push notifications on your simulator.\n\nIf you face any difficulty during implementation, please comment below or you can email me: blogswithrahul@gmail.com .\n\n\n<h4>Conclusion: <\/h4>\n\nApple did a great job, No need to create development certificates and provisional profiles. No need to depend on API developer. Build push notification functionality and move further. Once everything gets configured, you can move it on production.\n<div style=\"text-align:center;\">\n  <script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\n  <ins class=\"adsbygoogle\"\n       style=\"display:block\"\n       data-ad-client=\"ca-pub-9268892677399703\"\n       data-ad-slot=\"1234567890\"\n       data-ad-format=\"auto\"\n       data-full-width-responsive=\"true\"><\/ins>\n  <script>\n       (adsbygoogle = window.adsbygoogle || []).push({});\n  <\/script>\n<\/div>\n<\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">bandalrahul.github.io\/posts\/RsultsInSwift<\/guid><title>Result In Swift<\/title><description>At the 2019 WWDC Apple introduced a new UI framework called SwiftUI. From the initial phase of iOS development, we are looking at Xibs and storyboards to build a user interface in ios, macOS and WatchOS app, many more developers were fed-up from developing UI by Storyboard, maybe you are one of them, there are a lot of drawbacks of UIkit over SwiftUI.<\/description><link>bandalrahul.github.io\/posts\/RsultsInSwift<\/link><pubDate>Sun, 22 Dec 2024 17:08:00 +0530<\/pubDate><content:encoded><![CDATA[<h1>Result In Swift<\/h1><p>Apple introduced Result standard library into Swift Codebase in swift 5, Result has enum type, Result represents the outcome of any Operation or Functionality, like calling asynchronous API call, API response may be Success or failure, We can use Result to represent the combination of API Success and Fail. Let us see how Result works, this is how Result defined in Swift library<\/p><pre><code class=\"language-swift\">enum Result&lt;Success, Failure&gt; where Failure: Error {\n    case success(Success)\n    case failure(Failure)\n}\n<\/code><\/pre><p>Result returns either success or failure with value. Success type is generic means it could be anything Array of model objects like [Employee] more may be NSData, String, Int, but failure should always conform Error Type. Syntax be like<\/p><pre><code class=\"language-swift\">Result &lt;[Employee]?, Error&gt;\n<\/code><\/pre><h4>Lets Implement Result Practically <\/h4><p>We looked around how Results defined in Swift library, Now we will perform Result type implementation by calling asynchronous API.<\/p><p>Here, I have created one model class, it conforms decodable protocol for the sake of decode response received from web service without parsing it by any particular key from the response. if you didn’t get this don’t worry as we will move on, you will get to know why this model class we have created. Here is the example of the model class.<\/p><pre><code class=\"language-swift\">struct Employee: Decodable {\n    var id: Int?\n    var first_name : String?\n    var last_name: String?\n    var email: String?\n    var avatar: String?\n}\n\n<\/code><\/pre><p>As we have discussed Result represents two combinations of the parameter, which are Success and Failure, Success type could be anything model, string, int but Failure should always conform Error type.<\/p><p>After calling API outcome may be a failure, which will come in front in the form of Error type, Here we are trying to categorize this error by creating APIErrors enum to segregate which type of failure we faced while calling asynchronous API Call, Error may be Url not found, parsing fails, or it could be data missing Error. we have created this enum for readability and understanding purpose to know the cause of the error, You can ignore this part if you want to move on with only basic Error type.<\/p><pre><code class=\"language-swift\">enum APIErrors: Error {\n    case URLNotFoundError\n    case ParsingError\n    case DataMissingError\n}\n\n<\/code><\/pre><p>Now, we are in an important phase, keep your eyes on each line. previously we are handling API outcomes ( success and failure ) by adding two parameters in the completion handler to get response results. for example :<\/p><pre><code class=\"language-swift\">func getEmployeeData(completionHandler: @escaping ([Employee]?, Error?) -&gt; Void) {\n    ...\n}\n\n<\/code><\/pre><p>Since we were checking previously is error is nil, we were considering the API called is successful. and we were handling responses like [Employee] model array data.<\/p><p>Now we changed a few things in completion handler callback, we wrapped both parameters in the Result type.<\/p><pre><code class=\"language-swift\">func getEmployeeData(completionHandler: @escaping(Result &lt;[Employee]?, APIErrors&gt;) -&gt; Void ) {\n}\n<\/code><\/pre><p>So Results can send either success or failure to completion handler. if the response will have a successful outcome, Result in returns with any data and if the response will have failure outcome Result in returns with Error type.<\/p><h4>Result returns success :<\/h4><pre><code class=\"language-swift\">let employeeObjects = try JSONDecoder.init().decode([Employee].self, from: jsonData)\ncompletionHandler(.success(employeeObjects))\n<\/code><\/pre><h4>Result returns failure :<\/h4><pre><code class=\"language-swift\">completionHandler(.failure(.ParsingError))\n<\/code><\/pre><p>I have created one demo function for the asynchronous API call. I am calling free open-source API and getting employee data, we have already created a model class for handling response. here I conveyed how Result type is responding on API outcome, Outcome may be success or failure, we are returning an Array of Employee objects on success and APIError enum error type on failure. Please look carefully at this bunch of code. I tried my best to convey Result type functioning.<\/p><pre><code class=\"language-swift\">func getEmployeeData(completionHandler: @escaping(Result &lt;[Employee]?, APIErrors&gt;) -&gt; Void ) {\n        let urlString = \"https:\/\/reqres.in\/api\/users?\"\n        guard let url = URL(string: urlString) else {\n            print(\"Invalid url\")\n            return\n        }\n        URLSession.shared.dataTask(with: url) { (responseData, responseInfo, error) in\n            if error == nil {\n                do {\n                    let jsonResponse = try JSONSerialization.jsonObject(with: responseData!, options: .mutableContainers)\n                    if let responseArray = jsonResponse as? [String:Any] {\n                        if let dataArray = responseArray[\"data\"] as? [[String:Any]] {\n                            do {\n                                let jsonData = try JSONSerialization.data(withJSONObject: dataArray, options: .fragmentsAllowed)\n                                let employeeObjects = try JSONDecoder.init().decode([Employee].self, from: jsonData)\n                                completionHandler(.success(employeeObjects))\n                            } catch  {\n                                completionHandler(.failure(.ParsingError))\n                            }\n                        }\n                    }\n                } catch {\n                    completionHandler(.failure(.DataMissingError))\n                }\n            } else {\n                completionHandler(.failure(.URLNotFoundError))\n            }\n        }.resume()\n    }\n<\/code><\/pre><p>Now we almost have done everything, implement completion handler wherever you want, Switch Result into .success and .failure block, you will also get success parameter you sent from function itself, as success will return Array of employee objects and failure will return Error type.<\/p><pre><code class=\"language-swift\">var emps = [Employee]()\n    init() {\n        getEmployeeData { (result) in\n            switch result {\n            case  .success(let employees):\n                self.emps = employees!\n                break\n            case  .failure(let error):\n                print(error.localizedDescription)\n                break\n            }\n        }\n    }\n\n<\/code><\/pre><p>I have tried all this code and then added on the blog post, if somebody is not understood anything, please write me an email, I will reply on the same, and If you face anything went wrong in code or explanation please let me know.<\/p><p>email: blogswithrahul@gmail.com<\/p><h4>Conclusion :<\/h4><p>A feature like a Result eliminated lots of uncertainty in the code, Result can be used for handling outcome and states of any logical functionality and critical operations.<\/p><!-- AdSense Code --><div style=\"text-align:center;\">\n  <script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\n  <ins class=\"adsbygoogle\"\n       style=\"display:block\"\n       data-ad-client=\"ca-pub-9268892677399703\"\n       data-ad-slot=\"1234567890\"\n       data-ad-format=\"auto\"\n       data-full-width-responsive=\"true\"><\/ins>\n  <script>\n       (adsbygoogle = window.adsbygoogle || []).push({});\n  <\/script>\n<\/div>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">bandalrahul.github.io\/posts\/SwiftUIvsUIkit<\/guid><title>SwiftUI vs UIKit<\/title><description>At the 2019 WWDC Apple introduced a new UI framework called SwiftUI. From the initial phase of iOS development, we are looking at Xibs and storyboards to build a user interface in ios, macOS and WatchOS app, many more developers were fed-up from developing UI by Storyboard, maybe you are one of them, there are a lot of drawbacks of UIkit over SwiftUI.<\/description><link>bandalrahul.github.io\/posts\/SwiftUIvsUIkit<\/link><pubDate>Sun, 22 Dec 2024 17:08:00 +0530<\/pubDate><content:encoded><![CDATA[<h1>SwiftUI vs UIKit<\/h1><p>At the 2019 WWDC Apple introduced a new UI framework called SwiftUI. From the initial phase of iOS development, we are looking at Xibs and storyboards to build a user interface in ios, macOS and WatchOS app, many more developers were fed-up from developing UI by Storyboard, maybe you are one of them, there are a lot of drawbacks of UIkit over SwiftUI.<\/p><p>Yeah…. but the SwiftUI also has one major drawback, Apps created in SwiftUI only support iOS 13 and the next version, and SwiftUI don’t allow us to debug hierarchy of views. For now, SwiftUI requires the following pieces of stuff: Xcode 11.4 macOS Catalina to start building apps in SwiftUI.<\/p><p>It starts and end with view:<\/p><p>Whole SwiftUI framework is completely looping in view, no more UITableView, UIcollectionView, UIView, UICollectionViewCell, UITableViewCell classes in SwiftUI framework.<\/p><p>The given example SwiftUI uses Struct to initialize and define through the View protocol. Some properties return View. As Swift UI uses DSL like syntax, the return is omitted from the Struct body.<\/p><pre><code class=\"language-swift\">import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Text(\"Welcome to Swift By Rahul\")\n    }\n}\n<\/code><\/pre><pre><code class=\"language-swift\">struct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n<\/code><\/pre><h4>Sync Design and code  (Declarative Programming): <\/h4><p>From the launch day of Xcode we are using xibs, storyboards and programmatically UI for developing UI content such as Static &amp; dynamic content, Animation, Graphics, etc. When your user interface is created in code. You can see dynamic previews of this code on-canvas preview. You also have a choice, you can code user interface by yourself or you can use canvas editor(drag and drop UI building tool) to code on behalf.<\/p><h4>Benefits of declarative programming : <\/h4><p>Easy to write. Fast. Adaptive (Does Not need recompilation for the preview of the coded User interface) Important Note: Canvas editor UI content reflects in code at the movement, but in UIKit changes done in storyboard or xib are not visualized in UIViewcontroller class.<\/p><h4>Adopt existing UIKit app with swiftUI:  <\/h4><p>Yes UIKit and SwiftUI framework can communicate with each other, SwiftUI designed very perfectly to deal with existing frameworks, the UIHostingViewController class is becoming a mediator here. It integrates SwiftUI view with UIKIt ViewController, honestly in genuine SwiftUI App use UIHostingViewController for specifying root view controller to UIWindow.<\/p><h4>SwiftUI is Reactive :  <\/h4><p>Traditional iOS development doesn’t support any bindable mechanism in pure swift, that’s why React Swift and React cocoa came into the picture, in SwiftUI Apple achieved some mechanism by state management and binding, though variables and property can bind with the user interface. SwiftUI supports By default MVVM architecture. A combine framework allows us to perform event-oriented operations. Omitted to create and to implement observer and delegate communication patterns by the reactive mechanism.<\/p><p>Protocols, Classes, and properties like @publisher, @publishers, @anyPublisher, @published, @cancellable and @subscriber are designed to achieve reactive goals in SwiftUI.<\/p><pre><code class=\"language-swift\">import SwiftUI\n\nstruct ContentView: View {\n    @State var name = \"\"\n    var body: some View {\n        NavigationView {\n            VStack {\n                TextField(\"Swift By Rahul\", text: $name).padding(12)\n                Text(name).padding(12)\n            }\n        }.background(Color.white)\n    }\n}\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n<\/code><\/pre><p>As you can see the variable name is stated by @State property, and the name variable is bound with TextField, so whenever any action performed with TextField, the string value of TextField will eventually store in the name variable.<\/p><p>Some small benefits of SwiftUI:<\/p><p>The compilation time of storyboard and xib is far more than SwiftUI. So its quickly compiling and running on the simulator.<\/p><p>No headache of xib xml file conflicts while merging multiple code commits<\/p><p>Canvas preview is awesome, needs not to compile the whole project to see UI preview.<\/p><p>No headache of Constraints, AutoLayout like storyboard.<\/p><p>App created for iOS can use for MacOS as well. Hardware platform portability is a very crucial feature provided in SwiftUI.<\/p><p>IBOutlets and UI properties need not to be handle in ViewController class.<\/p><p>No delegates and datasource methods for UI Components.<\/p><h4>Conclusion:  <\/h4><p>SwiftUI is a newborn programming language, its very adaptive to learn but as SwiftUI framework is not working with previous iOS versions like iOS versions less than iOS 13. Start a new project in swift UI, for now, it’s very risky. Because it will not cover 100% audience due to platform compatibility. Yes But SwiftUI is the future of iOS.<\/p><p>Keep learning…..<\/p><div style=\"text-align:center;\">\n  <script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\n  <ins class=\"adsbygoogle\"\n       style=\"display:block\"\n       data-ad-client=\"ca-pub-9268892677399703\"\n       data-ad-slot=\"1234567890\"\n       data-ad-format=\"auto\"\n       data-full-width-responsive=\"true\"><\/ins>\n  <script>\n       (adsbygoogle = window.adsbygoogle || []).push({});\n  <\/script>\n<\/div>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">bandalrahul.github.io\/posts\/iOSvsAndroid<\/guid><title>Why the iPhone is more secure than Android?<\/title><description>Two major operating systems are widely used for mobile phones, iOS, and Android. Android is owned by Google and iOS is owned by Apple, here we will discuss how iOS is more secure than the Android operating system.<\/description><link>bandalrahul.github.io\/posts\/iOSvsAndroid<\/link><pubDate>Sun, 22 Dec 2024 17:08:00 +0530<\/pubDate><content:encoded><![CDATA[<h1>Why the iPhone is more secure than Android?<\/h1><p>Android is an open-source operating system, means Google provides a platform development kit to hardware manufacturers like MI, One plus, and Samsung. Here google is creating software parts of the mobile device and the hardware part is manufactured by other companies, Due to miscommunication between hardware and software developers, version compatibility is the major drawback find in android devices.<\/p><p>iOS is not an open-source operating system, here Hardware and Software both are developed by Apple, and devices are sold by Apple itself. Durability and usability of Apple iPhones are more than android devices, Because of new iOS versions release after testing new and old devices.<\/p><p>Example: before the release of iOS 13, Apple tests iOS 13 operating system is properly working on iPhone 7,8,8plus, those phones released with old iOS versions like iOS 10, iOS 11, etc.<\/p><h4>iCloud : <\/h4><p>iCloud is a standard technology, using more for backup, where Apple stores all your things, like data including:<\/p><p>Images<\/p><p>Videos<\/p><p>Documents<\/p><p>Contacts<\/p><p>Calendar Data<\/p><p>Notes<\/p><p>Remainder<\/p><p>Siri Shortcuts<\/p><p>Voice Memos<\/p><p>Emails<\/p><p>And credentials like :<\/p><p>Siri information<\/p><p>Wifi Passwords<\/p><p>Apple card transactions<\/p><p>Health App data<\/p><p>Screen time<\/p><p>Safari history<\/p><p>Keyboard frequently used vocabulary<\/p><p>I will not deep dive technically, how iCloud is better than google cloud and google drive, but yes, iCloud provides end to end encryption, means your data will read-only by sender and receiver, Apple itself can't read your data, Apple is very attentive about Security, Privacy, Authentication,<\/p><p>If you are using iPhone and logged in iCloud, your photos, documents, videos, credentials are more secure than any android phone and another operating system phone.<\/p><h4>Messages:<\/h4><p>Android allows the app developer to ask permission from the user to fetch and read messages, let me give you an example: if you ever used True-caller application. True-caller asked you to allow permission to read messages, contacts and other stuff. If you allow them to read the message they are accessing the message and storing it in their database server. Your message contains personal chat, Bank transaction notifications, Subscription notifications, Portal password, and credentials, or data may be in any form.<\/p><p>App service like True-caller may leak your data and threaten you. else they are selling your data to other organizations like advertising agencies to collect surveys indirectly from you, like which bank is preferred by users, which subscription users are purchasing? in which things users are in favor?, previously apple was not allowed to read OTP in iOS app, But due to trendy app usability features iOS providing the feature to read OTP by adding new property in UITextfiled components like.<br> textField.textContentType = .oneTimeCode<br> textField.keyboardType = .numberPad<\/p><h4>Location:<\/h4><p>Location is a crucial topic with respect to security and privacy. We all are using maps, In Android, we are using google map and in iOS Apple itself using their own, Apple developed a map with partners tomtom and other geodata service provider.<\/p><p>Android users might be thinking of how Google got to know right now which hotel I am visiting and eventually asking reviews for the same hotel. Places Review notifications look like.<\/p><p>Means, you are sharing your location with google via your android device, Apple doing the same as accessing user locations like Android, but listen carefully, Apple phones sharing user location with their servers only once in a day, but Android sharing users location at every 4 minutes.<\/p><p>Google uses user location information for many purposes like advertising, google place recommendation, surveying data for the sake of marketing. Google utilizes your location data to improve its own business. iPhone is very safe to maintain your location privacy.<\/p><h4>APK (Android Application Package):<\/h4><p>APK is a package file of an Android Application, It can be shared from one device to another device and install it, It means Android allows to install apps without downloading from play store.<\/p><p>The major drawback of this, developers can develop buggy and virus contained applications and spread it in the community via APK file. instead of that iPhone won't allow the user to install apps from other resources except for App Store.<\/p><p>To add an iOS app on App Store apple has strict rules and guidelines than Android, Apple reviewing the application submitted by the developer for 4 to 5 days if anything is not matching and not fitting in their criteria, Apple rejects the application, otherwise, they approve the application and open to use this application for end-user.<\/p><h4>Conclusion: <\/h4><p>iPhones are far better than Android devices with respect to security, privacy, and other policies. If you want to secure your data, credentials and other kinds of stuff, iOS better choice for you.<\/p><div style=\"text-align:center;\">\n  <script async src=\"https:\/\/pagead2.googlesyndication.com\/pagead\/js\/adsbygoogle.js\"><\/script>\n  <ins class=\"adsbygoogle\"\n       style=\"display:block\"\n       data-ad-client=\"ca-pub-9268892677399703\"\n       data-ad-slot=\"1234567890\"\n       data-ad-format=\"auto\"\n       data-full-width-responsive=\"true\"><\/ins>\n  <script>\n       (adsbygoogle = window.adsbygoogle || []).push({});\n  <\/script>\n<\/div>]]><\/content:encoded><\/item><\/channel><\/rss>","itemCount":5}